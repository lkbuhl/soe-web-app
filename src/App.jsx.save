
const OralExamSimulator = () => {
  const [examState, setExamState] = useState('pre-exam')
  const [messages, setMessages] = useState([])
  const [userInput, setUserInput] = useState('')
  const [timer, setTimer] = useState(35 * 60)
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)
  const messagesEndRef = useRef(null)

  const examQuestions = [
    {
      question: `A 56-import React, { useState, useRef, useEffect } from 'react'import LLMHandler from './api/llmHandler'const OralExamSimulator = () => {  const [examState, setExamState] = useState('pre-exam')  const [messages, setMessages] = useState([])  const [userInput, setUserInput] = useState('')  const [timer, setTimer] = useState(35 * 60)  const messagesEndRef = useRef(null)  const llmHandler = useRef(null)  useEffect(() => {    // Initialize LLM handler    const initLLM = async () => {      llmHandler.current = new LLMHandler()      await llmHandler.current.initialize()    }    initLLM()  }, [])  useEffect(() => {    let interval    if (examState === 'in-progress' && timer > 0) {      interval = setInterval(() => {        setTimer((prevTimer) => prevTimer - 1)      }, 1000)    }    return () => clearInterval(interval)  }, [examState, timer])  const scrollToBottom = () => {    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })  }  useEffect(() => {    scrollToBottom()  }, [messages])  const formatTime = (seconds) => {    const minutes = Math.floor(seconds / 60)    const remainingSeconds = seconds % 60    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`  }  const startExam = async () => {    setExamState('in-progress')    try {      const initialQuestion = await llmHandler.current.getExaminerResponse({        messages: [],        timeRemaining: 35      })      setMessages([{        type: 'examiner',        text: initialQuestion      }])    } catch (error) {      console.error('Error starting exam:', error)      setMessages([{        type: 'examiner',        text: "Let's begin with your pre-operative evaluation for this case."      }])    }  }  const handleSubmit = async (e) => {    e.preventDefault()    if (!userInput.trim()) return    const newMessages = [...messages, {      type: 'candidate',      text: userInput    }]    setMessages(newMessages)    setUserInput('')    try {      const examinerResponse = await llmHandler.current.getExaminerResponse({        messages: newMessages,        timeRemaining: Math.floor(timer / 60)      })      setMessages(prev => [...prev, {        type: 'examiner',        text: examinerResponse      }])    } catch (error) {      console.error('Error getting examiner response:', error)      setMessages(prev => [...prev, {        type: 'examiner',        text: "Let's move on to discuss another aspect of this case."      }])    }  }  return (    <div style={{ maxWidth: '800px', margin: '0 auto', padding: '1rem' }}>      <div style={{ backgroundColor: 'white', borderRadius: '8px', padding: '1.5rem', boxShadow: '0 2px 4px rgba(0,0,0,0.1)' }}>        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1rem' }}>          <h1 style={{ fontSize: '1.5rem', fontWeight: 'bold' }}>Standardized Oral Examination Simulator</h1>          {examState === 'in-progress' && (            <div style={{ fontFamily: 'monospace' }}>{formatTime(timer)}</div>          )}        </div>        {examState === 'pre-exam' ? (          <div style={{ textAlign: 'center' }}>            <p style={{ marginBottom: '1rem' }}>Ready to start your oral board preparation?</p>            <button               onClick={startExam}              style={{                 backgroundColor: '#3490dc',                color: 'white',                padding: '0.5rem 1rem',                borderRadius: '4px',                border: 'none',                cursor: 'pointer'              }}            >              Start Exam Session            </button>          </div>        ) : (          <div>            <div style={{               height: '400px',              overflowY: 'auto',              border: '1px solid #e2e8f0',              borderRadius: '4px',              padding: '1rem',              marginBottom: '1rem'            }}>              {messages.map((message, index) => (                <div                   key={index}                  style={{                    padding: '0.75rem',                    borderRadius: '4px',                    backgroundColor: message.type === 'examiner' ? '#f7fafc' : '#ebf8ff',                    marginLeft: message.type === 'examiner' ? '0' : '1rem',                    marginBottom: '0.5rem'                  }}                >                  <strong>{message.type === 'examiner' ? 'Examiner: ' : 'You: '}</strong>                  {message.text}                </div>              ))}              <div ref={messagesEndRef} />            </div>                        <form onSubmit={handleSubmit} style={{ display: 'flex', gap: '0.5rem' }}>              <input                type='text'                value={userInput}                onChange={(e) => setUserInput(e.target.value)}                style={{                  flex: 1,                  padding: '0.5rem',                  border: '1px solid #e2e8f0',                  borderRadius: '4px'                }}                placeholder='Type your response...'                disabled={timer <= 0}              />              <button                 type='submit'                style={{                  backgroundColor: '#3490dc',                  color: 'white',                  padding: '0.5rem 1rem',                  borderRadius: '4px',                  border: 'none',                  cursor: 'pointer'                }}                disabled={timer <= 0}              >                Respond              </button>            </form>          </div>        )}      </div>    </div>  )}export default OralExamSimulatorear-old, 70 Kg man presents for left upper lobectomy. 
      PMH includes MI 4 months ago with recent angina. 
      Current medications include diltiazem and nitroglycerin PRN.
      Vitals: P 72, BP 140/80, R 20.
      
      Would you induce with thiopental? Why or why not?`,
      followUp: 'How specifically would this choice affect the patient\'s coronary perfusion?'
    },
    {
      question: 'The surgeon requests a double-lumen tube. How would you proceed?',
      followUp: 'How would you confirm proper position?'
    },
    {
      question: 'After 20 minutes of one-lung ventilation, SpO2 decreased from 99% to 90%. What would you do?',
      followUp: 'What specific parameters would you monitor?'
    }
  ]

  useEffect(() => {
    let interval
    if (examState === 'in-progress' && timer > 0) {
      interval = setInterval(() => {
        setTimer((prevTimer) => prevTimer - 1)
      }, 1000)
    }
    return () => clearInterval(interval)
  }, [examState, timer])

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const formatTime = (seconds) => {
    const minutes = Math.floor(seconds / 60)
    const remainingSeconds = seconds % 60
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`
  }

  const startExam = () => {
    setExamState('in-progress')
    setMessages([{
      type: 'examiner',
      text: examQuestions[0].question
    }])
  }

  const handleSubmit = async (e) => {
    e.preventDefault()

    const newMessages = [...messages, {
      type: 'candidate',
      text: userInput
    }]
    setMessages(newMessages)
    setUserInput('')

    // Wait for state to update
    setTimeout(() => {
      const currentQuestion = examQuestions[currentQuestionIndex]
      const isAnsweringMainQuestion = newMessages.filter(m => m.type === 'candidate').length % 2 === 1

      if (isAnsweringMainQuestion) {
        // After first response to main question, ask follow-up
        setMessages(prev => [...prev, {
          type: 'examiner',
          text: 'Let me interrupt here. ' + currentQuestion.followUp
        }])
      } else {
        // After follow-up response, move to next main question
        const nextIndex = currentQuestionIndex + 1
        setCurrentQuestionIndex(nextIndex)
        
        if (nextIndex < examQuestions.length) {
          setMessages(prev => [...prev, {
            type: 'examiner',
            text: examQuestions[nextIndex].question
          }])
        } else {
          setMessages(prev => [...prev, {
            type: 'examiner',
            text: 'This concludes our examination session. Thank you.'
          }])
        }
      }
    }, 1000)
  }

  return (
    <div style={{ maxWidth: '800px', margin: '0 auto', padding: '1rem' }}>
      <div style={{ backgroundColor: 'white', borderRadius: '8px', padding: '1.5rem', boxShadow: '0 2px 4px rgba(0,0,0,0.1)' }}>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1rem' }}>
          <h1 style={{ fontSize: '1.5rem', fontWeight: 'bold' }}>Standardized Oral Examination Simulator</h1>
          {examState === 'in-progress' && (
            <div style={{ fontFamily: 'monospace' }}>{formatTime(timer)}</div>
          )}
        </div>

        {examState === 'pre-exam' ? (
          <div style={{ textAlign: 'center' }}>
            <p style={{ marginBottom: '1rem' }}>Ready to start your oral board preparation?</p>
            <button 
              onClick={startExam}
              style={{ 
                backgroundColor: '#3490dc',
                color: 'white',
                padding: '0.5rem 1rem',
                borderRadius: '4px',
                border: 'none',
                cursor: 'pointer'
              }}
            >
              Start Exam Session
            </button>
          </div>
        ) : (
          <div>
            <div style={{ 
              height: '400px',
              overflowY: 'auto',
              border: '1px solid #e2e8f0',
              borderRadius: '4px',
              padding: '1rem',
              marginBottom: '1rem'
            }}>
              {messages.map((message, index) => (
                <div 
                  key={index}
                  style={{
                    padding: '0.75rem',
                    borderRadius: '4px',
                    backgroundColor: message.type === 'examiner' ? '#f7fafc' : '#ebf8ff',
                    marginLeft: message.type === 'examiner' ? '0' : '1rem',
                    marginBottom: '0.5rem'
                  }}
                >
                  <strong>{message.type === 'examiner' ? 'Examiner: ' : 'You: '}</strong>
                  {message.text}
                </div>
              ))}
              <div ref={messagesEndRef} />
            </div>
            
            <form onSubmit={handleSubmit} style={{ display: 'flex', gap: '0.5rem' }}>
              <input
                type='text'
                value={userInput}
                onChange={(e) => setUserInput(e.target.value)}
                style={{
                  flex: 1,
                  padding: '0.5rem',
                  border: '1px solid #e2e8f0',
                  borderRadius: '4px'
                }}
                placeholder='Type your response...'
                disabled={timer <= 0}
              />
              <button 
                type='submit'
                style={{
                  backgroundColor: '#3490dc',
                  color: 'white',
                  padding: '0.5rem 1rem',
                  borderRadius: '4px',
                  border: 'none',
                  cursor: 'pointer'
                }}
                disabled={timer <= 0}
              >
                Respond
              </button>
            </form>
          </div>
        )}
      </div>
    </div>
  )
}

export default OralExamSimulator
